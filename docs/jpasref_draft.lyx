#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{fancyhdr}
\usepackage{nameref}
\usepackage{titlesec}
\usepackage{framed}
\usepackage{needspace}
\usepackage{color}
\usepackage{longtable}
\usepackage{multicol}
\usepackage{mathabx}

\def\version{1.0~(Draft)}
\def\license{MIT License}
\def\licenseText{%
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ``Software''), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

\itshape The software is provided ``as is'', without warranty of any kind, express or
implied, including but not limited to the warranties of merchantability,
fitness for a particular purpose and noninfringement. In no event shall the
authors or copyright holders be liable for any claim, damages or other
liability, whether in an action of contract, tort or otherwise, arising from,
out of or in connection with the software or the use or other dealings in the
Software.
}
\def\url{https://github.com/ashurrafiev/JPas}
\date{}
\author{Ashur Rafiev}

\makeatletter
\def\@maketitle{%
\newpage
\thispagestyle{empty}%
\null
\vfill%
\begin{flushright}%
{\fontsize{60}{70}\selectfont\bfseries \@title \par}%
\vskip 0.5em
\rule{\textwidth}{1pt}\par%
{\Huge Reference Guide \par}%
\vskip 5em
{\Huge Version \version \par}%
\vfill%
\vfill%
{\normalsize Copyright~\copyright~2017 \par}%
{\@author \par}%
\vskip 1em
{Available under \license ~at:\par}%
{\url \par}%
\end{flushright}%
\vskip 1.5em
\newpage
\thispagestyle{empty}%
\null
\vfill%
{\noindent\normalsize Copyright~\copyright~2017 \@author \par}%
\vskip 1.5em
{\noindent\large\bfseries \license \par}%
\vskip 0.5em
{\noindent\small\licenseText \par}%
\vskip 1.5em
\newpage
}
\makeatother

\renewcommand{\sectionmark}[1]{}
\renewcommand{\subsectionmark}[1]{}

\fancyhf{}
\fancyhead[RO, LE]{\itshape\rightmark}
\fancyhead[LE]{\bfseries JPas Reference Guide v\version}
\fancyfoot[RO, LE]{\thepage}
\renewcommand\headrulewidth{0.4pt}
\renewcommand\footrulewidth{0pt}
\pagestyle{fancy}

\fancypagestyle{plain}{ %
\fancyhf{} % remove everything
\fancyfoot[RO, LE]{\thepage}
\renewcommand{\headrulewidth}{0pt}
\renewcommand{\footrulewidth}{0pt}
}

\makeatletter
\newcommand*{\justifyheading}{\raggedleft}
\newcommand{\sectionbreak}{\cleardoublepage}
\titleformat{\section}{\huge\bfseries\justifyheading}{\thesection.}{0.5em}
{\thispagestyle{plain}\markright{\thesection.~\@currentlabelname}}
[\vspace{-0.5ex}\rule{\textwidth}{1pt}]
\titlespacing{\section}{0pt}{0pt}{5em}
\makeatother

\titlespacing{\subsection}{\parindent}{30pt plus 15pt}{15pt}
\titleformat{\subsection}{\needspace{108pt}\Large\bfseries}{\thesubsection}{0.5em}{}[]
\titlespacing{\subsubsection}{\parindent}{10pt plus 10pt}{5pt}
\titleformat{\subsubsection}{\large\bfseries}{\thesubsubsection}{0.5em}{}[]

\renewcommand\thetable{\thesection.\arabic{table}}

\let\oitemize\itemize
\renewcommand\itemize{\oitemize\setlength{\itemsep}{0pt}}
\renewcommand{\labelitemi}{$\blackdiamond$}

\newcommand{\kw}[1]{\textbf{#1}}
\newcommand{\comm}[1]{{\itshape \{#1\}}}
\newcommand{\code}[1]{{\begin{hyphenrules}{nohyphenation}%
\normalfont\sffamily #1%
\end{hyphenrules}}}

\newcommand{\codebox}[1]{
\null\vspace{-0.3em}%
\setlength{\fboxsep}{8pt}%
\colorbox[gray]{0.95}{\parbox{\dimexpr\linewidth-28pt}%
{\noindent\sffamily #1}\par}%
\vspace{0.7em}%
}

\newenvironment{note}[1][Note]{%
\vspace{0.5em}%
\begin{leftbar}%
\noindent\textbf{#1:}\itshape%
}{%
\end{leftbar}%
\vspace{0.5em}
}

\newlength{\mkwidth}
\settowidth{\mkwidth}{$^{*}$}
\newcommand{\hsmk}{\hspace{\mkwidth}}

\setlength\LTleft{\parindent}
\setlength\LTright{0pt}
\let\myIndex\theindex\renewcommand{\theindex}%
{\cleardoublepage\myIndex\addcontentsline{toc}{section}{\indexname}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 134.65pt
\topmargin 122.5pt
\rightmargin 134.65pt
\bottommargin 122.5pt
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
JPas
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\begin_layout Plain Layout


\backslash
tableofcontents
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
JPas
\emph default
 is an interpreter of Pascal-like language, called 
\emph on
JPascal
\emph default
, running in Java Virtual Machine (JVM).
 It supports a variety of features, including console input and output,
 as well as graphical interface, mouse and keyboard events.
\end_layout

\begin_layout Subsubsection*
Why?
\end_layout

\begin_layout Standard

\emph on
To do:
\emph default
 invent a decent motivation.
\end_layout

\begin_layout Subsection
About JPascal
\end_layout

\begin_layout Standard
JPascal language draws its inspiration from early Turbo
\begin_inset space ~
\end_inset

Pascal versions 3.0
\begin_inset space ~
\end_inset

to
\begin_inset space ~
\end_inset

5.0, before the object oriented programming was introduced.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{note}[Disclaimer]
\end_layout

\end_inset


\begin_inset space ~
\end_inset

Back in the days, Turbo
\begin_inset space ~
\end_inset

Pascal was a registered trademark of Borland International,
\begin_inset space ~
\end_inset

Inc., USA, and it is still a registered trademark owned by CodeGear
\begin_inset space ~
\end_inset

LLC, USA.
 Even though, to the author's knowledge, Turbo
\begin_inset space ~
\end_inset

Pascal
\begin_inset space ~
\end_inset

IDE has been released to public for free, it is important to emphasise that
 JPascal does not copy Turbo
\begin_inset space ~
\end_inset

Pascal version of Pascal programming language, as explained in this section
 and with more details in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Differences-from-Classic"

\end_inset

.
 Turbo
\begin_inset space ~
\end_inset

Pascal version
\begin_inset space ~
\end_inset

5.0 is used in this manual only as a historical reference and a baseline
 for feature comparison, and is further referred as 
\emph on
classical
\begin_inset space ~
\end_inset

Pascal
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{note}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Differences from Classical Pascal
\begin_inset CommandInset label
LatexCommand label
name "subsec:Differences-from-Classic"

\end_inset


\end_layout

\begin_layout Standard
JPascal adds new features and removes some from the classical Pascal.
 Many of the changes are done because of JPas environment is running in
 JVM.
 JPascal is a higher level programming language than classical Pascal.
 Most of the removed features are linked to a specific system architecture.
\end_layout

\begin_layout Standard
Keywords that existed in classical Pascal, but have not been added to JPascal:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{3}
\backslash
code{
\backslash
bfseries
\end_layout

\begin_layout Plain Layout


\backslash
noindent absolute
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

external
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

goto
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

inline
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

interrupt
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

packed
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

program
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

set
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

unit
\end_layout

\begin_layout Plain Layout

}
\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Program structure
\end_layout

\begin_layout Standard
Program does not start with the keyword 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{Program}}
\end_layout

\end_inset

, and units do not start with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{Unit}}
\end_layout

\end_inset

.
 In fact, these are not keywords in JPascal.
\end_layout

\begin_layout Standard
Minimal 
\begin_inset Quotes eld
\end_inset

Hello world
\begin_inset Quotes erd
\end_inset

 program in classical Pascal:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{Program} Hello;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{Begin}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad WriteLn(`Hello world!');
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{End}.%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In JPascal it becomes a one-liner:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

WriteLn(`Hello world!').%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Variable, type, and constant declarations
\end_layout

\begin_layout Standard
There are no dedicated declaration blocks (apart from the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{interface}}
\end_layout

\end_inset

 part in a unit), all declarations can be done in-place, anywhere in the
 code.
\end_layout

\begin_layout Subsubsection
Unit structure
\end_layout

\begin_layout Standard
Interface/implementation structure is not limited to units, however it is
 not very useful anywhere else.
 The syntax is also different, as shown below.
\end_layout

\begin_layout Standard
In classical Pascal:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{Unit} UnitName;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{interface}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{Public declarations.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{implementation}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{Implementation and private declarations.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{Begin}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{Unit initialisaton code.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{End}.%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In JPascal:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{interface}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{Public declarations.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{implementation}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{Unit initialisaton code with implementation.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{end}.%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Basic data types
\end_layout

\begin_layout Standard
Integer numbers are represented only with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset

 type, which represents 32-bit signed integer numbers.
 There are no 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Byte}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Word}
\end_layout

\end_inset

, or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{LongInteger}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset

 is implemented using double precision floating point numbers (64-bit).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{String}
\end_layout

\end_inset

 type does not take size as a parameter.
 The strings have variable length realised by Java strings.
\end_layout

\begin_layout Standard
No 
\emph on
packed
\emph default
 data types; 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{packed}}
\end_layout

\end_inset

 is not a reserved keyword.
\end_layout

\begin_layout Subsubsection
Enumerated types
\end_layout

\begin_layout Standard
Enumerated types are defined using square brackets 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{[}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{]}
\end_layout

\end_inset

 instead of parentheses 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{(}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{)}
\end_layout

\end_inset

.
 This is done for consistency with array and record literals, see
\begin_inset space ~
\end_inset

Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Array-and-Record-Literals"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Arrays
\end_layout

\begin_layout Standard
In JPascal, array sizes are not enforced, and it is possible to write 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{array of} SomeType}
\end_layout

\end_inset

 without the range.
 This is called abstracted array types, and they can be used in function
 and procedure argument types or within pointer types.
 It is not possible, however, to initialise an actual array object of this
 type, hence it cannot be used for variables.
\end_layout

\begin_layout Subsubsection
Records
\end_layout

\begin_layout Standard
Variant records and tag fields are not possible.
\end_layout

\begin_layout Standard
Type-forwarding for pointers is even more permissive than in classical Pascal.
 It is possible to make a pointer to a record type within this record type's
 declaration:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{type} Person = 
\backslash
kw{record}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad Name: String;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad Age: Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad Next : 
\backslash
^{}Person;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad 
\backslash
kw{end};%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Array and record literals
\begin_inset CommandInset label
LatexCommand label
name "subsec:Array-and-Record-Literals"

\end_inset


\end_layout

\begin_layout Standard
Array and record literals are defined using square brackets 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{[}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{]}
\end_layout

\end_inset

 (unlike regular parentheses 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{(}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{)}
\end_layout

\end_inset

 in classical Pascal.
 Because of this, you can use array and record literals anywhere in the
 code.
 Regular parentheses would make no distinction between single-value array
 and a parenthetic expression.
\end_layout

\begin_layout Subsubsection
Sets
\end_layout

\begin_layout Standard
Sets are not added in this version of JPas, and probably will not be added
 any time soon.
 Even though it is a nice feature, it has a very limited application, so
 may not worth time investment.
 In the current implementation of JPas, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{set}}
\end_layout

\end_inset

 is not a reserved keyword
\end_layout

\begin_layout Subsubsection
Files
\end_layout

\begin_layout Standard
Version
\begin_inset space ~
\end_inset

1.0 of JPas does not support working with files, however this functionality
 may be added later in one way or another.
 At the moment, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{file}}
\end_layout

\end_inset

 is not a keyword, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Text}
\end_layout

\end_inset

 is not a reserved identifier.
\end_layout

\begin_layout Subsubsection
For loops
\end_layout

\begin_layout Standard
Counter may be any L-value, not just a variable.
 You are allowed to change the counter inside the loop body.
 Starting and ending conditions are still evaluated only once, before the
 loop starts.
\end_layout

\begin_layout Subsubsection
Pointers and memory addressing
\end_layout

\begin_layout Standard
JPas interpreter implements its own memory structure based on Java objects,
 which is different from the classical DOS memory model.
 It is not possible to get numerical addresses of memory items.
 As the result, pointer arithmetic is not possible.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Mem}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Port}
\end_layout

\end_inset

 arrays, provided in classical Pascal, do not exist in JPas.
 Almost all of the memory access functions and procedures are also removed.
\end_layout

\begin_layout Standard
No 
\emph on
absolute
\emph default
 access; 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{absolute}}
\end_layout

\end_inset

 is not a reserved keyword.
\end_layout

\begin_layout Standard

\emph on
Overlays
\emph default
 are meaningless to modern systems, so they haven't been added to JPas.
\end_layout

\begin_layout Subsubsection
Garbage collection
\end_layout

\begin_layout Standard
On the bright side, the memory management became much easier thanks to JVM's
 Garbage Collector (GC).
\end_layout

\begin_layout Standard
In classical Pascal, it was mandatory to call either 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Dispose}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Mark}
\end_layout

\end_inset

/
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Release}
\end_layout

\end_inset

 for every pointer allocated by the function 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{New}
\end_layout

\end_inset

.
 Failing to do so would lead to memory leaks.
\end_layout

\begin_layout Standard
In JPas, disposing of unused memory is done by GC, and there are no such
 functions as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Dispose}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Mark}
\end_layout

\end_inset

, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Release}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{var} Q: 
\backslash
^{}Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{begin}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad 
\backslash
kw{var} P: 
\backslash
^{}Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad New(P); 
\backslash
comm{Allocate memory.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad P
\backslash
^{} := 8;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Q := P;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{end}; 
\backslash
comm{Variable P is destroyed.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{The memory is still referenced by Q.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

WriteLn(Q
\backslash
^{}); 
\backslash
comm{Prints `8'.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Q := 
\backslash
kw{nil}; 
\backslash
comm{Clear the pointer.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{Memory is automatically unallocated
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

because there are no pointers referencing it.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Functions and procedures
\end_layout

\begin_layout Standard
No untyped arguments because absolute access is not allowed.
\end_layout

\begin_layout Standard
No 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{external}}
\end_layout

\end_inset

 , 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{inline}}
\end_layout

\end_inset

, and other procedural modifiers.
\end_layout

\begin_layout Standard
No procedural types or function pointers.
\end_layout

\begin_layout Standard
Many standard functions and procedures are changed.
 Please refer to Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Standard-Procedures"

\end_inset

 for the reference on the updated versions.
\end_layout

\begin_layout Subsubsection
Labels, exit and goto
\end_layout

\begin_layout Standard
Labels do not need an in-advance declaration.
 In JPascal, a label marks a statement.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{goto}}
\end_layout

\end_inset

 statement has been deprecated in many languages.
 JPascal does not implement it.
\end_layout

\begin_layout Standard
Most interesting behaviour can be realised using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{exit} Label}
\end_layout

\end_inset

 statements, which exits the statement marked with the label.
 This always guarantees safe behaviour.
 It is still possible to use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{exit}}
\end_layout

\end_inset

 without a label to exit a function, procedure, or the program, like in
 classical Pascal.
\end_layout

\begin_layout Section
Language Elements
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Whitespace
\begin_inset Index idx
status open

\begin_layout Plain Layout
Whitespace
\end_layout

\end_inset

 and Comments
\begin_inset Index idx
status open

\begin_layout Plain Layout
Comment
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Whitespace is any number of tabs, spaces and newline characters in any combinati
on.
 A comment is any text enclosed in curly braces 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
{}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
}}
\end_layout

\end_inset

, or between 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{(*}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{*)}
\end_layout

\end_inset

.
 Whitespaces and comments are ignored by the parser.
\end_layout

\begin_layout Subsection
Keywords and Identifiers
\end_layout

\begin_layout Standard
The list of keywords
\begin_inset Index idx
status open

\begin_layout Plain Layout
Keywords
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{4}
\backslash
code{
\backslash
bfseries
\end_layout

\begin_layout Plain Layout


\backslash
noindent and
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

array
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

begin
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

case
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

const
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

div
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

do
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

downto
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

else
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

end
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

exit$^{*}$
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

file
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

for
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

forward
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

function
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

if
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

implementation
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

in
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

interface
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

label
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

mod
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

nil
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

not
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

of
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

or
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

procedure
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

record
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

repeat
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

shl
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

shr
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

then
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

to
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

type
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

until
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

uses
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

var
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

while
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

with
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

xor
\end_layout

\begin_layout Plain Layout

}
\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$^{*}$~
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{exit}}
\end_layout

\end_inset

 was a function in classical Pascal, not a keyword.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Identifier
\begin_inset Index idx
status open

\begin_layout Plain Layout
Identifiers
\end_layout

\end_inset

 is a sequence of characters including Latin letters, numbers and underscore.
 It must contain at least one letter and cannot start with a number.
 Identifiers can be used as names for variables, constants, types, functions,
 procedures, etc.
\end_layout

\begin_layout Standard
The list of reserved identifiers
\begin_inset Index idx
status open

\begin_layout Plain Layout
Identifiers!reserved
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{3}
\backslash
code{
\end_layout

\begin_layout Plain Layout


\backslash
noindent Boolean
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Char
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

False
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Integer
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Real
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Result
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

String$^{*}$
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Text
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

True
\end_layout

\begin_layout Plain Layout

}
\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$^{*}$~
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{String}
\end_layout

\end_inset

 was a keyword in classical Pascal, now it is considered a registered identifier.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Identifiers and keywords are case-insensitive.
 It is considered a good programming style to write keywords in lower case
 and start identifiers in capital case.
 The exceptions are the main 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{Begin}}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{End}}
\end_layout

\end_inset

 keywords of the program, which are usually capitalised, and local variables
 with single-character names, e.g.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{x}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{y}
\end_layout

\end_inset

, which can be lower case.
\end_layout

\begin_layout Subsection
Constant Literals
\end_layout

\begin_layout Subsubsection
Numeric literals
\begin_inset Index idx
status open

\begin_layout Plain Layout
Literals!numeric
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Any sequence of digits 0–9 form a decimal integer number.
 Unary `minus' operator 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{--}
\end_layout

\end_inset

 creates a negative number.
 Unary `plus' operator 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{+}
\end_layout

\end_inset

 can be optionally used to emphasise positive numbers.
 In JPascal, integer numbers are 32-bit, hence specifying numbers larger
 than 
\begin_inset Formula $\left(2^{31}-1\right)$
\end_inset

 or smaller than 
\begin_inset Formula $\left(-2^{31}\right)$
\end_inset

 will produce a compilation error.
\end_layout

\begin_layout Standard
Hexadecimal integer literals are preceded with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
$}
\end_layout

\end_inset

 symbol.
 It is possible to specify larger numbers in hexadecimal format, but they
 will be cropped to 32-bit with overflow.
 For instance, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
$FFFFFFFF}
\end_layout

\end_inset

 will produce decimal 
\begin_inset Formula $\left(-1\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
comm{Integer numbers:}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

123 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

--8 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

+8 
\backslash
comm{Same as 8} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

00025 
\backslash
comm{Same as 25} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
$FF 
\backslash
comm{Decimal 255} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
$FFFFFFFF 
\backslash
comm{Decimal --1 (overflow).}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Real numbers have integer and fractional parts separated by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{.}
\end_layout

\end_inset

 (period).
 Scientific notation is also allowed.
 Examples are shown below.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
comm{Real numbers:}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

0.01 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

3.141592 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

2.5E-6 
\backslash
comm{Same as 0.000025} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

2.5E+6 
\backslash
comm{Same as 250000} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

1E9 
\backslash
comm{1000000000.0 -- one billion as a real number.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{note}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

Scientific notation always produces real numbers, so they need to be explicitly
 converted to integer.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{note}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

Int(1E9) 
\backslash
comm{Now it is an integer number.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is an implicit cast from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset

 to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset

 type.
\end_layout

\begin_layout Subsubsection
Character
\begin_inset Index idx
status open

\begin_layout Plain Layout
Literals!character
\end_layout

\end_inset

 and string literals
\begin_inset Index idx
status open

\begin_layout Plain Layout
Literals!string
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Strings of characters enclosed in single quotes 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{'}
\end_layout

\end_inset

 produce string or character literals.
 Character literals contain exactly one character.
 JPascal supports Unicode managed by Java.
 All characters are 16-bit.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

`Hello, I am a string.'
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

`A' 
\backslash
comm{...and this is a character.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is also possible to create single character constants from their ANSI/Unicode
 values by preceding a decimal or hexadecimal numeric literal with a hash
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
#}
\end_layout

\end_inset

 symbol.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
comm{Characters from ANSI/Unicode values:}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
#48 
\backslash
comm{Same as `0' (zero)}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
#65 
\backslash
comm{Same as `A' (Latin A)}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
#
\backslash
$41 
\backslash
comm{Also `A' (Latin A)}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
#
\backslash
$03A9 
\backslash
comm{Capital Greek Omega $
\backslash
Omega$}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is an implicit cast from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Char}
\end_layout

\end_inset

 to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Sting}
\end_layout

\end_inset

 type.
\end_layout

\begin_layout Subsubsection
Built-in constants
\end_layout

\begin_layout Standard
Boolean constants 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{True}
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{False}
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Null-pointer constant 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{nil}}
\end_layout

\end_inset

 is a keyword.
\end_layout

\begin_layout Subsection
Operator symbols
\end_layout

\begin_layout Standard
Operator symbols recognised by JPascal are:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{4}
\backslash
code{
\end_layout

\begin_layout Plain Layout


\backslash
noindent ; 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

, 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

: 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

:= 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

+ 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

-- 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

{*} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

/ 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

{[} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

{]} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

( 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

= 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

<> 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

> 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

< 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

>= 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

<= 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

@ 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
^{} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

.
 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

..
\end_layout

\begin_layout Plain Layout

}
\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Program Structure
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
JPascal program is a single statement ending with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{.}
\end_layout

\end_inset

 (period) symbol.
 
\begin_inset Quotes eld
\end_inset

Hello world
\begin_inset Quotes erd
\end_inset

 program in JPascal looks like this:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

WriteLn(`Hello world!').%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{WriteLn}
\end_layout

\end_inset

 outputs information to system console, which in this case is the string
 literal `Hello world!'.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\emph on
Statement
\emph default
 is defined as an executable action.
 Statements can be compound, internally executing more statements.
 For example, a block statement 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{begin} ...
 
\backslash
kw{end}}
\end_layout

\end_inset

 is used to combine a sequence of multiple statements into one.
 Statements within a block statement are separated using semicolons.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{Begin}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad WriteLn(`Hello world!');
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad WriteLn(`JPascal is here.');
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad WriteLn(`Bye!')
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{End}.%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Types of statements
\end_layout

\begin_layout Standard
This sections gives a brief overview of statements and program structuring.
 A detailed reference on statements can be found in the Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Statements"

\end_inset

 of this guide.
\end_layout

\begin_layout Standard
Statements can be one of the following types:
\end_layout

\begin_layout Itemize
Empty statement.
\end_layout

\begin_layout Itemize
Declaration statements include variable, constant, type, function, and procedure
 declarations.
\end_layout

\begin_layout Itemize
Inclusion statement 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{uses}}
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Interface statement 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{interface} ...
 
\backslash
kw{implementation} ...
 
\backslash
kw{end}}
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Block statement.
\end_layout

\begin_layout Itemize
Control statements include exit, branching and loop statements.
\end_layout

\begin_layout Itemize
Assignment.
\end_layout

\begin_layout Itemize
Procedure call or expression statements.
\end_layout

\begin_layout Itemize
Scope statements include only 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{with}}
\end_layout

\end_inset

 statement.
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Memory and Stack
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Section
Declarations
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Variable declarations
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{var} VarName: VarType;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{var} VarName: VarType = InitialValue;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Constant declarations
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{const} ConstName = Value;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{const} ConstName: ConstType = Value;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Type declarations
\end_layout

\begin_layout Standard
Type declaration statement:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{type} TypeName = TypeDefinition;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The statement above create a new type with the name 
\emph on
TypeName
\emph default
.
 
\emph on
TypeDefinition
\emph default
 can be either a name of another type, simple or declared, or one of the
 structured type definitions:
\end_layout

\begin_layout Itemize
Enumerated type.
\end_layout

\begin_layout Itemize
Subrange type.
\end_layout

\begin_layout Itemize
Array type.
\end_layout

\begin_layout Itemize
Record type.
\end_layout

\begin_layout Itemize
Pointer type.
\end_layout

\begin_layout Subsection
Function and procedure declarations
\end_layout

\begin_layout Standard
See Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Procedures-and-Functions"

\end_inset

.
\end_layout

\begin_layout Subsection
Units
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Unit inclusion
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{uses} StandardUnitName;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{uses} `PathToUnitFile'; 
\backslash
comm{User defined module.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Interface blocks
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{interface}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{Public declarations.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{implementation}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{Unit initialisaton code with implementation.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{end}.%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Section
Types
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Simple Types
\end_layout

\begin_layout Subsubsection
Integer
\begin_inset Index idx
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
32-bit signed integer numbers.
 Default value is 0.
\end_layout

\begin_layout Subsubsection
Real
\begin_inset Index idx
status open

\begin_layout Plain Layout
Real
\end_layout

\end_inset


\end_layout

\begin_layout Standard
64-bit floating point numbers.
 Default value is 0.0.
\end_layout

\begin_layout Subsubsection
Boolean
\begin_inset Index idx
status open

\begin_layout Plain Layout
Boolean
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{False}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{True}
\end_layout

\end_inset

.
 Default value is 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{False}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Char
\begin_inset Index idx
status open

\begin_layout Plain Layout
Char
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unicode characters (16-bit).
 Default value is a null-character 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
#0}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
String
\begin_inset Index idx
status open

\begin_layout Plain Layout
String
\end_layout

\end_inset

 Type
\begin_inset Index idx
status open

\begin_layout Plain Layout
Types!String
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Strings of characters.
 Default value is an empty string.
\end_layout

\begin_layout Standard

\emph on
To do:
\emph default
 String indexing.
\end_layout

\begin_layout Subsection
Enumerated Types
\begin_inset Index idx
status open

\begin_layout Plain Layout
Types!enumerated
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Enumerated type definition example:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

{[North, East, South, West]}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Subrange Types
\begin_inset Index idx
status open

\begin_layout Plain Layout
Types!subrange
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Enumerated type definition example:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

0..99%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Ordinal Types
\begin_inset Index idx
status open

\begin_layout Plain Layout
Types!ordinal
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ordinal types are the types that have ordering of their values.
 Ordinal types are 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Char}
\end_layout

\end_inset

, enumerated, and subrange types.
\end_layout

\begin_layout Subsection
Array Types
\begin_inset Index idx
status open

\begin_layout Plain Layout
Types!array
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Array definitions
\end_layout

\begin_layout Standard
Array definition example:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{array}[1..5] 
\backslash
kw{of} Integer%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Multi-dimensional arrays:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{array}[1..5] 
\backslash
kw{of} 
\backslash
kw{array}[0..2] 
\backslash
kw{of}Integer%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the same as:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{array}[1..5, 0..2] 
\backslash
kw{of}Integer%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Index ranges can be of any ordinal type:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{type} Month = [January, February, March, April,
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad May, June, July, August,
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad September, October, November, December];
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{type} SummerTime = 
\backslash
kw{array}[June..August] 
\backslash
kw{of} Boolean;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Enumerated or subrange types can be used for the entire index range.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{type} Direction = [North, East, South, West];
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{type} Passability = 
\backslash
kw{array}[Direction] 
\backslash
kw{of} Boolean;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{The same as [North..West].}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Array literals
\begin_inset Index idx
status open

\begin_layout Plain Layout
Literals!array
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Accessing elements
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

SomeArray[3]
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

MultiArray[1, 3]
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

EnumArray[North]%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Index types must match:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{var} P: Passability;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

P[East] := True; 
\backslash
comm{Ok.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

P[Direction(1)] := True; 
\backslash
comm{Also ok.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

P[1] := True; 
\backslash
comm{Error! Index type mismatch.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Copy on assign
\end_layout

\begin_layout Standard
Arrays implement copy on assign:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{var} X, Y: 
\backslash
kw{array}[0..3] 
\backslash
kw{of} Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Y[2] := 5;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

X := Y; 
\backslash
comm{Copies all values from Y to X.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

X[2] := 8; 
\backslash
comm{Does not affect Y.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

WriteLn(X[2], `, ', Y[2]);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Outputs:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{8, 5}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Assigning array variables requires both arrays to have not only the same
 sizes, but also same index types and ranges.
 Copying is done recursively in multi-dimensional arrays, meaning that all
 dimensions of the array are copied over.
 
\end_layout

\begin_layout Subsubsection
Abstract arrays
\end_layout

\begin_layout Standard
Defined without the range:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{array} 
\backslash
kw{of} Integer%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cannot be instantiated, but can be used as argument types for functions
 and procedures, or within pointer types.
\end_layout

\begin_layout Standard
Abstract arrays cannot be used to declare types:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{type} ArrayOfInt = 
\backslash
kw{array} 
\backslash
kw{of} Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
comm{Error! Unknown range, cannot create array.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
To do:
\emph default
 array literals as abstract array initialisers.
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Record Types
\begin_inset Index idx
status open

\begin_layout Plain Layout
Types!record
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Record definitions
\end_layout

\begin_layout Standard
Record definition example:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{record}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad X: Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Y: Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Pressed: Boolean;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{end}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Fields of the same type can be grouped together:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{record}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad X, Y: Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Pressed: Boolean;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{end}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Record fields may have any type, including arrays and other records.
 A record type cannot contain itself, but it can contain a pointer to the
 itself, as described in
\begin_inset space ~
\end_inset

Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Pointers"

\end_inset

.
 If a record contains an abstract array, it is also considered abstract
 and cannot be instantiated or declared as a type.
\end_layout

\begin_layout Subsubsection
Record literals
\begin_inset Index idx
status open

\begin_layout Plain Layout
Literals!record
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

[X: 5; Y: 10; Pressed: False]%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Record literal with all fields set to compile-time constants is itself a
 compile-time constant.
\end_layout

\begin_layout Standard
Examples of an array literal inside a record literal and an array literal
 of records:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

{[Values: [1, 2, 3]]}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

{[[X: 0; Y: 1], [X: 1; Y: 0]]}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Accessing fields
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

SomeRecord.X%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A great way to efficiently access multiple fields of the same record variable
 or value is to use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{with}}
\end_layout

\end_inset

 statement:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{with} Rec 
\backslash
kw{do}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad 
\backslash
kw{begin}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad X := 10;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad Y := 3;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad Pressed := True;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad 
\backslash
kw{end};%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Copy on assign
\end_layout

\begin_layout Standard
Records also implement copy on assign, which is done recursively for all
 embedded records and arrays.
\end_layout

\begin_layout Subsection
Pointers
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pointer
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Types!pointer
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Pointers"

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Pointer definitions
\end_layout

\begin_layout Standard
A pointer is defined by putting 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
^{}}
\end_layout

\end_inset

 in front of another type.
 The pointer will be able to reference memory objects of that type.
 For instance, a pointer to integer is defined as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
^{}Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pointer can reference any type, including arrays, records, and other pointers.
\end_layout

\begin_layout Standard
Sometimes it is necessary to use a pointer to a type even before that type
 is defined.
 The syntax of JPascal allows that.
 Pointer to a record type can be defined inside that type's declaration:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{type} Item = 
\backslash
kw{record}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad Value: Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad Next: 
\backslash
^{}Item;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad 
\backslash
kw{end};%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following example is also allowed:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{type} PRecA = 
\backslash
^{}RecA;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{type} PRecB = 
\backslash
^{}RecB;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{type} RecA = 
\backslash
kw{record}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad P: PRecB;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad 
\backslash
kw{end};
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{type} RecB = 
\backslash
kw{record}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad P: PRecA;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad 
\backslash
kw{end};%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is called 
\emph on
forward type referencing
\emph default
, and it is only allowed when defining pointers.
 Referenced types must be declared within the same scope as the pointers.
\end_layout

\begin_layout Standard

\emph on
To do:
\emph default
 pointers to abstract arrays.
\end_layout

\begin_layout Subsubsection
Referencing and allocation
\end_layout

\begin_layout Standard
Operator 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{@}
\end_layout

\end_inset

 returns a reference to an existing memory object, such as variables, items
 within arrays, or record fields:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{var} N: Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{var} A: 
\backslash
kw{array}[1..5] 
\backslash
kw{of} Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{var} Rec: 
\backslash
kw{record}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad X, Y: Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad 
\backslash
kw{end};
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{var} P: 
\backslash
^{}Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

P := @N; 
\backslash
comm{Reference a variable.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

P := @A[3]; 
\backslash
comm{Reference an array item.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

P := @Rec.X; 
\backslash
comm{Reference a record field.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is possible to allocate memory objects directly using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{New}
\end_layout

\end_inset

 procedure.
 Such an object will persist in memory as long as there is at least one
 pointer referencing it.
 Once there are no references, the object will be automatically deleted
 by the Garbage Collector.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

New(P); 
\backslash
comm{Create new integer object.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
To do:
\emph default
 array allocation using New and NewArray.
\end_layout

\begin_layout Subsubsection
Dereferencing
\end_layout

\begin_layout Standard
Dereferencing a pointer is done by placing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
^{}}
\end_layout

\end_inset

 after the pointer.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{var} N: Integer = 3;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{var} P: 
\backslash
^{}Integer = @N;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

P
\backslash
^{} := 5;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

WriteLn(P
\backslash
^{}, `, ', N);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because 
\emph on
P
\emph default
 refers to the variable 
\emph on
N
\emph default
, writing to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{P
\backslash
^{}}
\end_layout

\end_inset

 actually writes to 
\emph on
N
\emph default
.
 Hence the code above will output:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{5, 5}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
To do:
\emph default
 object lifetime.
\end_layout

\begin_layout Subsection
File types
\begin_inset Index idx
status open

\begin_layout Plain Layout
Types!file
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Section
Expressions
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Operator Precedence
\end_layout

\begin_layout Standard
Highest precedence first:
\end_layout

\begin_layout Itemize
\noindent
\align left
Literals: constant literals, array and record literals, variables, function
\begin_inset space ~
\end_inset

calls, parentheses
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{( )}
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
\noindent
\align left
Postfix operators: indexed access
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{[ ]}
\end_layout

\end_inset

, record field access, pointer dereferencing
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
^{}}
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
\noindent
\align left
Prefix operators: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{+, --, 
\backslash
kw{not}, @}
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
\noindent
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{*, /, 
\backslash
kw{div}, 
\backslash
kw{mod}, 
\backslash
kw{and}, 
\backslash
kw{shl}, 
\backslash
kw{shr}}
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
\noindent
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{+, --, 
\backslash
kw{or}, 
\backslash
kw{xor}}
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
\noindent
\align left
Relational operations, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{in}}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

operator.
\end_layout

\begin_layout Standard
Operations with equal precedence are performed left to right.
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Arithmetic operators
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Binary arithmetic operators
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace 0.7em
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle" tabularwidth="100line%">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row topspace="0.5em" bottomspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operator
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operand
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Result
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
</row>
<row topspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{+}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
addition
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{--}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
subtraction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{*}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
multiplication
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{/}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
division
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{div}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integer
\begin_inset space ~
\end_inset

division
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row bottomspace="0.5em">
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{mod}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
modulo
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Unary arithmetic operators
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace 0.7em
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle" tabularwidth="100line%">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row topspace="0.5em" bottomspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operator
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operand
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Result
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
</row>
<row topspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{+}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
identity
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row bottomspace="0.5em">
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{--}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
negation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Logical Operators
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Boolean logical operators
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace 0.7em
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle" tabularwidth="100line%">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row topspace="0.5em" bottomspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operator
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operand
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Result
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
</row>
<row topspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{not}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
inversion
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{and}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
logical
\begin_inset space ~
\end_inset

and
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{or}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
logical
\begin_inset space ~
\end_inset

or
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row bottomspace="0.5em">
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{xor}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
logical
\begin_inset space ~
\end_inset

xor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Bitwise logical operators
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace 0.7em
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle" tabularwidth="100line%">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row topspace="0.5em" bottomspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operator
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operand
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Result
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
</row>
<row topspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{not}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bitwise
\begin_inset space ~
\end_inset

inversion
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{and}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bitwise
\begin_inset space ~
\end_inset

and
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{or}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bitwise
\begin_inset space ~
\end_inset

or
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{xor}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bitwise
\begin_inset space ~
\end_inset

xor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{shl}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
shift
\begin_inset space ~
\end_inset

left
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row bottomspace="0.5em">
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{shr}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
shift
\begin_inset space ~
\end_inset

right
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
String Operators
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
String operators
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace 0.7em
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle" tabularwidth="100line%">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row topspace="0.5em" bottomspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operator
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operand
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Result
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
</row>
<row topspace="0.5em" bottomspace="0.5em">
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{+}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
concatenation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{String}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{String}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Relational Operators
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Relational operators
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace 0.7em
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle" tabularwidth="100line%">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row topspace="0.5em" bottomspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operator
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operand
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Result
\begin_inset space ~
\end_inset

Types
\end_layout

\end_inset
</cell>
</row>
<row topspace="0.5em">
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{=}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
equal
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
any
\begin_inset space ~
\end_inset

type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{<>}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
not
\begin_inset space ~
\end_inset

equal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
any
\begin_inset space ~
\end_inset

type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{<}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
less
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
comparable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{>}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
greater
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
comparable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{<=}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
less
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

equal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
comparable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row bottomspace="0.5em">
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{>=}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
greater
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

equal
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
comparable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Section
Statements
\begin_inset CommandInset label
LatexCommand label
name "sec:Statements"

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Assignments
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
L-values versus R-values
\end_layout

\begin_layout Standard
L-values are expressions that can receive values from assignment operation.
 The following are L-values:
\end_layout

\begin_layout Itemize
Variables.
\end_layout

\begin_layout Itemize
Function and procedure arguments, including by-reference and by-value arguments,
 see
\begin_inset space ~
\end_inset

Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Procedures-and-Functions"

\end_inset

.
\end_layout

\begin_layout Itemize
Dereferenced pointers.
\end_layout

\begin_layout Itemize
Items of L-value arrays.
\end_layout

\begin_layout Itemize
Fields of L-value records.
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Block Statements
\end_layout

\begin_layout Subsection
Declaration Statements
\end_layout

\begin_layout Subsection
Exit Statement
\end_layout

\begin_layout Standard
Exit statement interrupts the execution of the current procedure of function
 and exits it immediately.
 In the top level block, the statement exits the program with exit code
\begin_inset space ~
\end_inset

0 (normal termination).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{exit};%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
Labels can be used to mark certain statements.
 While inside that statement, the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{exit}}
\end_layout

\end_inset

 can be use to interrupt the statement by its label name.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{exit} LabelId;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The operation will interrupt all statements until 
\emph on
LabelId
\emph default
 is reached.
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Branching Statements
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
If statement
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{if} Condition 
\backslash
kw{then}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Statement;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
If-else statement
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{if} Condition 
\backslash
kw{then}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Statement
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{else}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad ElseStatement;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Case statement
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{case} Expression 
\backslash
kw{of}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Value1: Statement1;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Value2: Statement2;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad ...
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad 
\backslash
kw{else}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad ElseStatement;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{end};
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Loop Statements
\end_layout

\begin_layout Subsubsection
While loop
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{while} Condition 
\backslash
kw{do}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Statement;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Repeat-until loop
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{repeat}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Statement1;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Statement2;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad ...
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{until} Condition;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
For loop
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{for} Index:=Start 
\backslash
kw{to} Finish 
\backslash
kw{do}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Statement;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Or alternatively, counting down loop:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{for} Index:=Start 
\backslash
kw{downto} Finish 
\backslash
kw{do}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Statement;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Section
Procedures and Functions
\begin_inset CommandInset label
LatexCommand label
name "sec:Procedures-and-Functions"

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Declarations
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Procedure declarations
\end_layout

\begin_layout Standard
Example of a procedure:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} WriteSum(X, Y: Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{begin}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad 
\backslash
kw{var} Sum: Integer = X+Y;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Write(X, `+', Y, `=', Sum);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{end};%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{note}~
\end_layout

\end_inset

Unlike in classical Pascal, variables and other declarations must be placed
 inside the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{begin} ...
 
\backslash
kw{end}}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

block.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{note}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the body is a single statement, it does not need to be enclosed in a
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{begin} ...
 
\backslash
kw{end}}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

block:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} WriteSum(X, Y: Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Write(X, `+', Y, `=', X+Y);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Function declarations
\end_layout

\begin_layout Standard
Example of a function:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Sum(X, Y: Integer): Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{begin}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Result := X+Y;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{end};%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Result}
\end_layout

\end_inset

 is a reserved identifier representing a special variable that stores the
 function's return value.
 It is a bad programming style not to write any value to the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Result}
\end_layout

\end_inset

, but it is not an error.
 A default value for the function type is returned in this case.
\end_layout

\begin_layout Subsubsection
Forward declarations
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Parameters
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Value parameters
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Reference parameters
\end_layout

\begin_layout Standard
...
 also called 
\emph on
variable parameters
\emph default
.
\end_layout

\begin_layout Standard
In classical Pascal it was possible to use untyped variable parameters and
 access them via absolute addressing.
 JPascal does not allow absolute addressing, hence untyped parameters are
 not allowed too.
\end_layout

\begin_layout Subsection
Procedural Types
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{type} RealFunc = 
\backslash
kw{function}(X, Y: Real): Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Sum(X, Y: Real): Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad Result := X+Y;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{var} Func: RealFunc;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Func := Sum;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

WriteLn(Func(3, 5)); 
\backslash
comm{Calls Sum(3, 5) and outputs 8.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Section
Standard Procedures and Functions
\begin_inset CommandInset label
LatexCommand label
name "sec:Standard-Procedures"

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
Unlike user-defined procedures, the standard procedures and functions are
 processed by the pre-compiler in a special way, which opens the following
 advantages:
\end_layout

\begin_layout Itemize
The same function or procedure name can be used by different functions.
 The choice of the actual function depends on the types of the arguments
 (this is called 
\emph on
overloading
\emph default
).
 The most notable example of overloading is type of the result being dependent
 on the type of the argument, like in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Min}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Max}
\end_layout

\end_inset

, or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Abs}
\end_layout

\end_inset

 functions.
\end_layout

\begin_layout Itemize
Variable number of arguments, denoted as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{(X, ...
 )}
\end_layout

\end_inset

, means 0 or more arguments like 
\emph on
X
\emph default
.
\end_layout

\begin_layout Itemize
Functions and procedures may take arguments of unspecified types or multiple
 specific types.
 Because of this, the section uses 
\begin_inset Quotes eld
\end_inset

invented
\begin_inset Quotes erd
\end_inset

 types that are not a part of the language but clarify what types can be
 accepted by the given procedure or function.
 These identifiers are listed below.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{longtable}{@{
\backslash
extracolsep{
\backslash
fill}}p{3cm}p{
\backslash
dimexpr
\backslash
linewidth-3cm-
\backslash
parindent-2
\backslash
tabcolsep}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{SomeType} & 
\end_layout

\end_inset

Any type is accepted.
\begin_inset VSpace 0.7em
\end_inset


\series bold

\begin_inset Newline newline
\end_inset


\series default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{SimpleType} & 
\end_layout

\end_inset

Only simple types (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Char}
\end_layout

\end_inset

) or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{String}
\end_layout

\end_inset

 are accepted.
\begin_inset VSpace 0.7em
\end_inset


\series bold

\begin_inset Newline newline
\end_inset


\series default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Ordinal} & 
\end_layout

\end_inset

Only ordinal types are accepted.
 Ordinal types are 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Char}
\end_layout

\end_inset

, enumerated, and subrange types.
\begin_inset VSpace 0.7em
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{AnyFile} & 
\end_layout

\end_inset

Untyped files (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{file}}
\end_layout

\end_inset

), typed files (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{file} 
\backslash
kw{of} SomeType}
\end_layout

\end_inset

), and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Text}
\end_layout

\end_inset

 files are accepted.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{longtable}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Execution Control
\end_layout

\begin_layout Subsubsection
Halt
\begin_inset Index idx
status open

\begin_layout Plain Layout
Halt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Halt;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Stop the program execution end exit JPas with exit code 0 (no error).
 This is the same as calling 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{exit}}
\end_layout

\end_inset

 statement from the main block of the program; however, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Halt}
\end_layout

\end_inset

 can be called from anywhere in the code.
\end_layout

\begin_layout Subsubsection
RunError
\begin_inset Index idx
status open

\begin_layout Plain Layout
RunError
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} RunError(Msg: String);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Stop the program execution with the runtime error and the specified message
 
\emph on
Msg
\emph default
.
 JPas exits with the code 1 (error).
\end_layout

\begin_layout Subsection
Pointers
\end_layout

\begin_layout Subsubsection
New
\begin_inset Index idx
status open

\begin_layout Plain Layout
New
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} New(
\backslash
kw{var} Ptr: 
\backslash
^{}SomeType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Allocates a new value of type 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{SomeType}
\end_layout

\end_inset

 and puts the pointer to the variable.
\end_layout

\begin_layout Subsubsection
NewArray
\begin_inset Index idx
status open

\begin_layout Plain Layout
NewArray
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} NewArray(
\backslash
kw{var} Ptr: 
\backslash
^{}
\backslash
kw{array} 
\backslash
kw{of} SomeType; Size, ...
 : Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Allocates a new array of type 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{SomeType}
\end_layout

\end_inset

 with the given 
\emph on
Size
\emph default
 and puts the pointer to the variable.
 You can allocate multi-dimensional arrays by specifying sizes for each
 dimension.
 If the type of array has a fixed range and 
\emph on
Size
\emph default
 does not match, a range check error will be issued during runtime.
\end_layout

\begin_layout Standard
The benefit of using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{NewArray}
\end_layout

\end_inset

 instead of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{New}
\end_layout

\end_inset

 is that it does not require knowing the size of the array in advance.
 Consider the following example:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{var} P: 
\backslash
^{}
\backslash
kw{array}[0..3] 
\backslash
kw{of} Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{var} Q: 
\backslash
^{}
\backslash
kw{array} 
\backslash
kw{of} Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

New(P); 
\backslash
comm{Works fine.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

New(Q); 
\backslash
comm{Error! Unknown range, cannot create array.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The array cannot be allocated unless its size is known.
 However, sometimes it is only known in runtime.
 This problem can be solved using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{NewArray}
\end_layout

\end_inset

, which creates the range with integer indexing from 0 to 
\begin_inset Formula $\left(\mathit{Size}-1\right)$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{var} N: Integer = 8; 
\backslash
comm{N is variable.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

NewArray(Q, N); 
\backslash
comm{Creates an array[0..7] of Integer.}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Time
\end_layout

\begin_layout Subsubsection
Delay
\begin_inset Index idx
status open

\begin_layout Plain Layout
Delay
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Delay(Milliseconds: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Puts the execution into sleep for the specified number of 
\emph on
Milliseconds
\emph default
.
 The exact timing is not guaranteed and the accuracy is determined by the
 operating system.
\end_layout

\begin_layout Subsubsection
SysTime
\begin_inset Index idx
status open

\begin_layout Plain Layout
SysTime
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} SysTime: Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns system time: the number of seconds passed since 1
\begin_inset space ~
\end_inset

January
\begin_inset space ~
\end_inset

1970.
\end_layout

\begin_layout Subsubsection
Elapsed
\begin_inset Index idx
status open

\begin_layout Plain Layout
Elapsed
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Elapsed: Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the number of seconds passed since the start of the program execution.
 The value is returned to millisecond precision, however the accuracy depends
 on the operating system.
\end_layout

\begin_layout Subsection
Mathematical Functions
\end_layout

\begin_layout Subsubsection
Int
\begin_inset Index idx
status open

\begin_layout Plain Layout
Int
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Int(X: Real): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the integer part of the real number 
\emph on
X
\emph default
.
 This function can be used to convert 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset

 type values to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Frac
\begin_inset Index idx
status open

\begin_layout Plain Layout
Frac
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Frac(X: Real): Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the fractional part of the real number 
\emph on
X
\emph default
.
 The result is always a positive number.
\end_layout

\begin_layout Subsubsection
Round
\begin_inset Index idx
status open

\begin_layout Plain Layout
Round
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Round(X: Real): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Rounds the real number 
\emph on
X
\emph default
 to a closest integer.
 This function can be used to convert 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset

 type values to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Sqrt
\begin_inset Index idx
status open

\begin_layout Plain Layout
Sqrt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Sqrt(X: Real): Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns square root of 
\emph on
X
\emph default
.
\end_layout

\begin_layout Subsubsection
Pi
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pi
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Pi: Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns constant
\begin_inset space ~
\end_inset


\begin_inset Formula $\pi$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{note}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

During pre-compilation, this function is always optimised to a constant
 value.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{note}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
ArcTan
\begin_inset Index idx
status open

\begin_layout Plain Layout
ArcTan
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} ArcTan(X: Real): Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns arctangent of 
\emph on
X
\emph default
 in radians.
\end_layout

\begin_layout Subsubsection
Sin
\begin_inset Index idx
status open

\begin_layout Plain Layout
Sin
\end_layout

\end_inset

 and Cos
\begin_inset Index idx
status open

\begin_layout Plain Layout
Cos
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Sin(X: Real): Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Cos(X: Real): Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the sine (or cosine) value of the angle 
\emph on
X
\emph default
, where 
\emph on
X
\emph default
 is in radians.
\end_layout

\begin_layout Subsubsection
Exp
\begin_inset Index idx
status open

\begin_layout Plain Layout
Exp
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Exp(X: Real): Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Ln
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ln
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Ln(X: Real): Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Abs
\begin_inset Index idx
status open

\begin_layout Plain Layout
Abs
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Abs(X: Real): Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Abs(X: Integer): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the absolute value of 
\emph on
X
\emph default
.
 
\emph on
X
\emph default
 can be integer or real, the result of the function will be of the same
 type as the argument.
\end_layout

\begin_layout Subsubsection
Sqr
\begin_inset Index idx
status open

\begin_layout Plain Layout
Sqr
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Sqr(X: Real): Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Sqr(X: Integer): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the square of 
\emph on
X
\emph default
, i.e.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{(X*X)}
\end_layout

\end_inset

.
 
\emph on
X
\emph default
 can be integer or real, the result of the function will be of the same
 type as the argument.
\end_layout

\begin_layout Subsubsection
Min
\begin_inset Index idx
status open

\begin_layout Plain Layout
Min
\end_layout

\end_inset

 and Max
\begin_inset Index idx
status open

\begin_layout Plain Layout
Max
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Min(X, Y: Real): Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Min(X, Y: Integer): Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Max(X, Y: Real): Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Max(X, Y: Integer): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the minimum (or maximum) of 
\emph on
X
\emph default
 and 
\emph on
Y
\emph default
.
 
\emph on
X
\emph default
 and 
\emph on
Y
\emph default
 can be integer or real, the result of the function will be of the same
 type as the arguments, or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset

 if their types differ.
\end_layout

\begin_layout Subsubsection
Odd
\begin_inset Index idx
status open

\begin_layout Plain Layout
Odd
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Odd(X: Integer): Boolean;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{True}
\end_layout

\end_inset

 if the argument is an odd number, i.e.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{(X 
\backslash
kw{mod} 2)<>0}
\end_layout

\end_inset

.
 Only works for integer numbers.
\end_layout

\begin_layout Subsection
Ordinal Functions
\end_layout

\begin_layout Subsubsection
Succ
\begin_inset Index idx
status open

\begin_layout Plain Layout
Succ
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Succ(N: Ordinal): Odrinal;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the ordinal successor value for 
\emph on
N
\emph default
.
 For integer 
\emph on
N
\emph default
, it is 
\begin_inset Formula $\left(N+1\right)$
\end_inset

.
 This function never goes out of range, but may overflow, as shown in the
 example below:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{type} Sides = [North, East, South, West];
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{var} N: Sides = Succ(West);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

WriteLn(N=North); 
\backslash
comm{Prints `true'}%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Pred
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pred
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Pred(N: Ordinal): Odrinal;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the ordinal predecessor value for 
\emph on
N
\emph default
.
 For integer 
\emph on
N
\emph default
, it is 
\begin_inset Formula $\left(N-1\right)$
\end_inset

.
 This function never goes out of range, but may overflow (see
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Succ}
\end_layout

\end_inset


\begin_inset space ~
\end_inset

function).
\end_layout

\begin_layout Subsubsection
Inc
\begin_inset Index idx
status open

\begin_layout Plain Layout
Inc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Inc(
\backslash
kw{var} N: Ordinal);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Change the value of the variable 
\emph on
N
\emph default
 to its ordinal successor.
 This is the same as:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

N := Succ(N);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Dec
\begin_inset Index idx
status open

\begin_layout Plain Layout
Dec
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Inc(
\backslash
kw{var} N: Ordinal);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Change the value of the variable 
\emph on
N
\emph default
 to its ordinal predecessor.
 This is the same as:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

N := Pred(N);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Ord
\begin_inset Index idx
status open

\begin_layout Plain Layout
Ord
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Ord(Ordinal): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the integer index for the ordinal 
\emph on
N
\emph default
 in relation to its range, starting with 0.
 If 
\emph on
N
\emph default
 is a character, the function returns its Unicode value.
 Integer 
\emph on
N
\emph default
 returns itself.
\end_layout

\begin_layout Subsection
Strings and Characters
\end_layout

\begin_layout Subsubsection
Chr
\begin_inset Index idx
status open

\begin_layout Plain Layout
Chr
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Chr(Code: Integer): Char;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns a character for the given Unicode value.
\end_layout

\begin_layout Subsubsection
UpCase
\begin_inset Index idx
status open

\begin_layout Plain Layout
UpCase
\end_layout

\end_inset

 and LowCase
\begin_inset Index idx
status open

\begin_layout Plain Layout
LowCase
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} UpCase(C: Char): Char;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} UpCase(S: String): String;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} LowCase(C: Char): Char;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} LowCase(S: String): String;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns an uppercase (or lowercase) value for the given character or string
 of characters.
 The type of the function is determined by the type of its argument.
\end_layout

\begin_layout Subsubsection
Format
\begin_inset Index idx
status open

\begin_layout Plain Layout
Format
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Format(Fmt: String; Value, ...
 : SimpleType): String;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
To do:
\emph default
 Java's String.format.
\end_layout

\begin_layout Subsubsection
Str
\begin_inset Index idx
status open

\begin_layout Plain Layout
Str
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Str(Value: SimpleType): String;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Converts a value of simple type (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Boolean}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Integer}
\end_layout

\end_inset

, or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Real}
\end_layout

\end_inset

) to a string using some default formatting.
 For more control, use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Format}
\end_layout

\end_inset

 function.
\end_layout

\begin_layout Subsubsection
Val
\begin_inset Index idx
status open

\begin_layout Plain Layout
Val
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Val(S: String; 
\backslash
kw{var} Target: Integer; 
\backslash
kw{var} Code: Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Val(S: String; 
\backslash
kw{var} Target: Real; 
\backslash
kw{var} Code: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Attempts to parse a numeric value from the given string 
\emph on
S
\emph default
 assuming the radix in 
\emph on
Code
\emph default
.
 Real numbers only accept radix
\begin_inset space ~
\end_inset

10 (decimal).
 On success, the result is put in the variable 
\emph on
Target
\emph default
.
 On failure, the 
\emph on
Code
\emph default
 is reset to
\begin_inset space ~
\end_inset

0.
\end_layout

\begin_layout Subsubsection
Copy
\begin_inset Index idx
status open

\begin_layout Plain Layout
Copy
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Copy(S: String; StartPos, EndPos: Integer): String;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns a substring of 
\emph on
S
\emph default
 from 
\emph on
StartPos
\emph default
 to 
\emph on
EndPos
\emph default
 (inclusive).
 Positions are numbered starting from
\begin_inset space ~
\end_inset

1.
\end_layout

\begin_layout Subsubsection
Length
\begin_inset Index idx
status open

\begin_layout Plain Layout
Length
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Length-str"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Length(S: String): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the number of characters in a string.
 For array length function, see
\begin_inset space ~
\end_inset

Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Length-array"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Pos
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pos
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Pos(S, Target: String): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the position of the first occurrence of substring 
\emph on
S
\emph default
 in the string 
\emph on
Target
\emph default
.
 Positions are starting from
\begin_inset space ~
\end_inset

1.
 If 
\emph on
S
\emph default
 is not found, the function returns
\begin_inset space ~
\end_inset

0.
\end_layout

\begin_layout Subsubsection
Concat
\begin_inset Index idx
status open

\begin_layout Plain Layout
Concat
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Concat(
\backslash
kw{var} Target: String; S, ...
 : String);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The procedure concatenates a number of strings to the string variable 
\emph on
Target
\emph default
.
 This is the same as:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout

Target := Target + S + ...
 ;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Delete
\begin_inset Index idx
status open

\begin_layout Plain Layout
Delete
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Delete(
\backslash
kw{var} Target: String; StartPos, EndPos: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Deletes a portion from a string.
 Positions are starting from
\begin_inset space ~
\end_inset

1.
\end_layout

\begin_layout Subsubsection
Insert
\begin_inset Index idx
status open

\begin_layout Plain Layout
Insert
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Insert(
\backslash
kw{var} Target; S: String; StartPos: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inserts a string into another at a given position.
 Positions are starting from
\begin_inset space ~
\end_inset

1.
\end_layout

\begin_layout Subsection
Arrays and Memory
\end_layout

\begin_layout Subsubsection
Fill
\begin_inset Index idx
status open

\begin_layout Plain Layout
Fill
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Fill(
\backslash
kw{var} Target: 
\backslash
kw{Array} 
\backslash
kw{of} SomeType; Value: SomeType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Fills the array 
\emph on
Target
\emph default
 with value 
\emph on
Value
\emph default
.
 The procedure also works with multi-dimensional arrays, like shown in the
 code below:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{var} X: 
\backslash
kw{array}{[}1..4, 1..3] 
\backslash
kw{of} Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Fill(X, 1);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The result is:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\emph on
Value
\emph default
 can be an array too, if the ranges match:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{var} X: 
\backslash
kw{array}[1..4, 1..3] 
\backslash
kw{of} Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{var} Y: 
\backslash
kw{array}[1..3] 
\backslash
kw{of} Integer = [1, 2, 3];
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Fill(X, Y);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And the result is:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Length
\begin_inset Index idx
status open

\begin_layout Plain Layout
Length
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Length-array"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Length(
\backslash
kw{var} Target: 
\backslash
kw{Array} 
\backslash
kw{of} SomeType): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the number of items in an array.
 For non-abstract arrays, this number is statically defined by the range
 as 
\begin_inset Formula $\left(max-min+1\right)$
\end_inset

.
 For abstract arrays allocated using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{NewArray}
\end_layout

\end_inset

, this number is defined by the 
\emph on
Size
\emph default
 parameter during array allocation.
\end_layout

\begin_layout Standard
For string length function, see
\begin_inset space ~
\end_inset

Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Length-str"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Swap
\begin_inset Index idx
status open

\begin_layout Plain Layout
Swap
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Swap(
\backslash
kw{var} X, Y: SomeType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Swaps the values of two variables.
\end_layout

\begin_layout Subsection
Random Number Generator (RNG)
\end_layout

\begin_layout Subsubsection
Randomize
\begin_inset Index idx
status open

\begin_layout Plain Layout
Randomize
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Randomize;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Randomize(Seed: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Set the seed for RNG to a specific (if given) or random (default) value.
\end_layout

\begin_layout Subsubsection
Random
\begin_inset Index idx
status open

\begin_layout Plain Layout
Random
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Random: Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Random(N: Integer): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Generate a random value.
 Without a parameter, the function generates a real value in the range
\begin_inset space ~
\end_inset


\begin_inset Formula $\left[0,1\right)$
\end_inset

.
 For the given integer argument
\begin_inset space ~
\end_inset


\emph on
N
\emph default
, the function generates an integer value in the range
\begin_inset space ~
\end_inset


\begin_inset Formula $\left[0,N\right)$
\end_inset

.
 
\emph on
N
\emph default
 must be positive.
\end_layout

\begin_layout Section
Input and Output
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Console
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Write
\begin_inset Index idx
status open

\begin_layout Plain Layout
Write
\end_layout

\end_inset

 and WriteLn
\begin_inset Index idx
status open

\begin_layout Plain Layout
WriteLn
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Write(Value, ...
 : SimpleType);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} WriteLn(Value, ...
 : SimpleType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} WriteLn;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{WriteLn}
\end_layout

\end_inset

 without parameters outputs a newline character.
\end_layout

\begin_layout Subsubsection
Read
\begin_inset Index idx
status open

\begin_layout Plain Layout
Read
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Read(
\backslash
kw{var} Target, ...
 : SimpleType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
ReadLn
\begin_inset Index idx
status open

\begin_layout Plain Layout
ReadLn
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ReadLn;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ReadLn(
\backslash
kw{var} Line: String);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ReadLn(
\backslash
kw{var} Target, ...
 : SimpleType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Working with Files
\end_layout

\begin_layout Subsubsection
Assign
\begin_inset Index idx
status open

\begin_layout Plain Layout
Assign
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Assign(F: AnyFile; FileName: String);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Assign a file name 
\emph on
FileName
\emph default
 to a file object
\begin_inset space ~
\end_inset


\emph on
F
\emph default
.
 The file must not be opened, call 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Close}
\end_layout

\end_inset

 before re-assigning the file.
\end_layout

\begin_layout Subsubsection
Reset
\begin_inset Index idx
status open

\begin_layout Plain Layout
Reset
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Reset(F: AnyFile);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Open file for reading.
 If the file is already opened, it will be closed first.
\end_layout

\begin_layout Subsubsection
Rewrite
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rewrite
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Rewrite(F: AnyFile);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Create a new file and open it for writing.
 If the file already exists, it will be overwritten.
 If the file is already opened, it will be closed first.
\end_layout

\begin_layout Subsubsection
Append
\begin_inset Index idx
status open

\begin_layout Plain Layout
Append
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Append(F: AnyFile);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Open a file for writing.
 If the file already exists, new output will be appended to the end of the
 file.
 If the file is already opened, it will be closed first.
\end_layout

\begin_layout Subsubsection
Eof
\begin_inset Index idx
status open

\begin_layout Plain Layout
Eof
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Eof(F: AnyFile): Boolean;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Test if there is any data in a file to be read.
 The file must be opened for reading.
\end_layout

\begin_layout Subsubsection
Flush
\begin_inset Index idx
status open

\begin_layout Plain Layout
Flush
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Flush(F: AnyFile);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Flush any pending buffers to the disk.
 The file must be opened for writing.
\end_layout

\begin_layout Subsubsection
Close
\begin_inset Index idx
status open

\begin_layout Plain Layout
Close
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Close(F: AnyFile);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Close the file if it has been opened.
\end_layout

\begin_layout Subsubsection
Erase
\begin_inset Index idx
status open

\begin_layout Plain Layout
Erase
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Erase(F: AnyFile);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Erase the file from the disk.
 The file must not be opened.
 The function will fail if 
\emph on
F
\emph default
 is assigned to the console.
\end_layout

\begin_layout Subsubsection
Rename
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rename
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Rename(F: AnyFile, NewName: String);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Rename the file to 
\emph on
NewName
\emph default
.
 The file must not be opened.
 The function will fail if 
\emph on
F
\emph default
 is assigned to the console.
\end_layout

\begin_layout Subsubsection
FileSize
\begin_inset Index idx
status open

\begin_layout Plain Layout
FileSize
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} FileSize(F: AnyFile): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the file size in bytes.
 The file must not be opened.
 The function will fail if 
\emph on
F
\emph default
 is assigned to the console.
\end_layout

\begin_layout Subsection
Working with Directories
\end_layout

\begin_layout Subsubsection
GetDir
\begin_inset Index idx
status open

\begin_layout Plain Layout
GetDir
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} GetDir: String;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Get full path to the current working directory.
\end_layout

\begin_layout Subsubsection
ChDir
\begin_inset Index idx
status open

\begin_layout Plain Layout
ChDir
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ChDir(Path: String);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Change working directory.
\end_layout

\begin_layout Subsubsection
MkDir
\begin_inset Index idx
status open

\begin_layout Plain Layout
MkDir
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} MkDir(Path: String);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Create new directory at the specified location.
\end_layout

\begin_layout Subsubsection
RmDir
\begin_inset Index idx
status open

\begin_layout Plain Layout
RmDir
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} RmDir(Path: String);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Delete directory.
 Only empty directories can be deleted using this procedure.
\end_layout

\begin_layout Subsubsection
FindFiles
\begin_inset Index idx
status open

\begin_layout Plain Layout
FindFiles
\end_layout

\end_inset

 and FindDirs
\begin_inset Index idx
status open

\begin_layout Plain Layout
FindDirs
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} FindFiles(
\backslash
kw{var} Ptr: 
\backslash
^{}
\backslash
kw{array} 
\backslash
kw{of} String): Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} FindDirs(
\backslash
kw{var} Ptr: 
\backslash
^{}
\backslash
kw{array} 
\backslash
kw{of} String): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
List names of all files (or subdirectories) in the current working directory.
\end_layout

\begin_layout Standard
The function allocates the array of required size and links it to the pointer
\begin_inset space ~
\end_inset


\emph on
Ptr
\emph default
.
 The number of elements in the array is returned as the function result.
\end_layout

\begin_layout Subsection
Text Files
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Write
\begin_inset Index idx
status open

\begin_layout Plain Layout
Write
\end_layout

\end_inset

 and WriteLn
\begin_inset Index idx
status open

\begin_layout Plain Layout
WriteLn
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Write(
\backslash
kw{var} T: Text; Value, ...
 : SimpleType);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} WriteLn(
\backslash
kw{var} T: Text; Value, ...
 : SimpleType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} WriteLn(T: Text);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{WriteLn}
\end_layout

\end_inset

 without parameters outputs a newline character.
\end_layout

\begin_layout Subsubsection
Read
\begin_inset Index idx
status open

\begin_layout Plain Layout
Read
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Read(
\backslash
kw{var} T: Text; 
\backslash
kw{var} Target, ...
 : SimpleType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
ReadLn
\begin_inset Index idx
status open

\begin_layout Plain Layout
ReadLn
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ReadLn(
\backslash
kw{var} T: Text);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ReadLn(
\backslash
kw{var} T: Text; 
\backslash
kw{var} Line: String);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ReadLn(
\backslash
kw{var} T: Text; 
\backslash
kw{var} Target, ...
 : SimpleType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Untyped Files
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Write
\begin_inset Index idx
status open

\begin_layout Plain Layout
Write
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Write(
\backslash
kw{var} F: 
\backslash
kw{file}; Value, ...
 : SimpleType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
BlockWrite
\begin_inset Index idx
status open

\begin_layout Plain Layout
BlockWrite
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} BlockWrite(
\backslash
kw{var} F: 
\backslash
kw{file}; 
\backslash
kw{var} Values: 
\backslash
kw{array} 
\backslash
kw{of} SimpleType;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad Count: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
ByteWrite
\begin_inset Index idx
status open

\begin_layout Plain Layout
ByteWrite
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ByteWrite(
\backslash
kw{var} F: 
\backslash
kw{file}; Value, ...
 : Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ByteWrite(
\backslash
kw{var} F: 
\backslash
kw{file}; 
\backslash
kw{var} Values: 
\backslash
kw{array} 
\backslash
kw{of} Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad Count: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Read
\begin_inset Index idx
status open

\begin_layout Plain Layout
Read
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Write(
\backslash
kw{var} F: 
\backslash
kw{file}; 
\backslash
kw{var} Target, ...
 : SimpleType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
BlockRead
\begin_inset Index idx
status open

\begin_layout Plain Layout
BlockRead
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} BlockWrite(
\backslash
kw{var} F: 
\backslash
kw{file}; 
\backslash
kw{var} Target: 
\backslash
kw{array} 
\backslash
kw{of} SimpleType;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad MaxCount: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
ByteRead
\begin_inset Index idx
status open

\begin_layout Plain Layout
ByteRead
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ByteWrite(
\backslash
kw{var} F: 
\backslash
kw{file}; 
\backslash
kw{var} Target, ...
 : Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ByteWrite(
\backslash
kw{var} F: 
\backslash
kw{file}; 
\backslash
kw{var} Target: 
\backslash
kw{array} 
\backslash
kw{of} Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad MaxCount: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Typed Files
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Write
\begin_inset Index idx
status open

\begin_layout Plain Layout
Write
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Write(
\backslash
kw{var} F: 
\backslash
kw{file} 
\backslash
kw{of} SomeType; Value, ...
 : SomeType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
BlockWrite
\begin_inset Index idx
status open

\begin_layout Plain Layout
BlockWrite
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} BlockWrite(
\backslash
kw{var} F: 
\backslash
kw{file} 
\backslash
kw{of} SomeType;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad 
\backslash
kw{var} Values: 
\backslash
kw{array} 
\backslash
kw{of} SomeType; Count: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Read
\begin_inset Index idx
status open

\begin_layout Plain Layout
Read
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} Write(
\backslash
kw{var} F: 
\backslash
kw{file} 
\backslash
kw{of} SomeType; 
\backslash
kw{var} Target, ...
 : SomeType);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
BlockRead
\begin_inset Index idx
status open

\begin_layout Plain Layout
BlockRead
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} BlockWrite(
\backslash
kw{var} F: 
\backslash
kw{file} 
\backslash
kw{of} SomeType;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad 
\backslash
kw{var} Target: 
\backslash
kw{array} 
\backslash
kw{of} SomeType; MaxCount: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Section
Graph2D Unit
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Graph2D Elements
\end_layout

\begin_layout Subsubsection
Window
\end_layout

\begin_layout Standard
Graph2D window supports the following built-in control keys:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{longtable}{@{
\backslash
extracolsep{
\backslash
fill}}p{3cm}p{
\backslash
dimexpr
\backslash
linewidth-3cm-
\backslash
parindent-2
\backslash
tabcolsep}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{Alt}~-~
\backslash
kw{+}} & 
\end_layout

\end_inset

Zoom in by increasing pixel scale.
\series bold

\begin_inset Newline newline
\end_inset


\series default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{Alt}~-~
\backslash
kw{--}} & 
\end_layout

\end_inset

Zoom out by decreasing pixel scale.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
kw{Alt}~-~
\backslash
kw{Enter}} & 
\end_layout

\end_inset

Toggle fullscreen mode.
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{longtable}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Closing the Graph2D window will immediately terminate the application as
 if calling 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{Halt}
\end_layout

\end_inset

 procedure.
\end_layout

\begin_layout Subsubsection
Canvas
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Bitmaps
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
Colours
\end_layout

\begin_layout Standard
Graph2D uses 32-bit colours: 8-bit per red, green, and blue channels, and
 also 8-bit transparency.
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Window Management
\end_layout

\begin_layout Subsubsection
InitWindow
\begin_inset Index idx
status open

\begin_layout Plain Layout
InitWindow
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} InitWindow(Title: String; Width, Height, PixelScale: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Creates and shows Graph2D window with specified 
\emph on
Title
\emph default
, screen buffer 
\emph on
Width
\emph default
 and 
\emph on
Height
\emph default
, and 
\emph on
PixelScale
\emph default
.
 Pixel scale of 0 triggers fullscreen mode.
\end_layout

\begin_layout Subsubsection
PresentWindow
\begin_inset Index idx
status open

\begin_layout Plain Layout
PresentWindow
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} PresentWindow;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Requests Graph2D window to display screen buffer.
\end_layout

\begin_layout Subsection
Mouse and Keyboard Input
\end_layout

\begin_layout Subsubsection
MouseX
\begin_inset Index idx
status open

\begin_layout Plain Layout
MouseX
\end_layout

\end_inset

 and MouseY
\begin_inset Index idx
status open

\begin_layout Plain Layout
MouseY
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} MouseX: Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} MouseY: Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns current mouse coordinates (X or Y).
\end_layout

\begin_layout Subsubsection
LeftMouse
\begin_inset Index idx
status open

\begin_layout Plain Layout
LeftMouse
\end_layout

\end_inset

 and RightMouse
\begin_inset Index idx
status open

\begin_layout Plain Layout
RightMouse
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} LeftMouse: Boolean;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} RightMouse: Boolean;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the current state of mouse buttons (left or right).
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{True}
\end_layout

\end_inset

 means the button is pressed.
\end_layout

\begin_layout Subsubsection
KeyDown
\begin_inset Index idx
status open

\begin_layout Plain Layout
KeyDown
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} KeyDown(ScanCode: Integer): Boolean;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Test the current state of a specific key.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{True}
\end_layout

\end_inset

 means the key is pressed.
\end_layout

\begin_layout Subsubsection
KeyPressed
\begin_inset Index idx
status open

\begin_layout Plain Layout
KeyPressed
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} KeyPressed: Boolean;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Test if the keyboard event buffer is not empty.
 See 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{ReadKey}
\end_layout

\end_inset

 for more details.
\end_layout

\begin_layout Subsubsection
ReadKey
\begin_inset Index idx
status open

\begin_layout Plain Layout
ReadKey
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} ReadKey: Char;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Retrieve and remove next event from the keyboard event buffer.
 The buffer logs typed keys and pressed control keys.
 If the returned value is zero character 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
#0}
\end_layout

\end_inset

 then the event represents a control key; call 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{ReadKey}
\end_layout

\end_inset

 again to receive the scan code of this key.
\end_layout

\begin_layout Standard
Keyboard event buffer can store up to 32 events and does not keep events
 older than 1 second.
 If the buffer is empty, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{ReadKey}
\end_layout

\end_inset

 will keep returning 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{
\backslash
#0}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Bitmaps
\end_layout

\begin_layout Subsubsection
CreateBitmap
\begin_inset Index idx
status open

\begin_layout Plain Layout
CreateBitmap
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} CreateBitmap(Width, Height: Integer; Alpha: Boolean): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
LoadBitmap
\begin_inset Index idx
status open

\begin_layout Plain Layout
LoadBitmap
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} LoadBitmap(FileName: String): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
LoadAtlas
\begin_inset Index idx
status open

\begin_layout Plain Layout
LoadAtlas
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} LoadAtlas(FileName: String; Width, Height: Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
null
\backslash
quad
\backslash
quad 
\backslash
kw{var} Bitmaps: 
\backslash
kw{array} 
\backslash
kw{of} Integer; Count: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
GetBitmap
\begin_inset Index idx
status open

\begin_layout Plain Layout
GetBitmap
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} GetBitmap(X, Y, Width, Height: Integer): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
PutBitmap
\begin_inset Index idx
status open

\begin_layout Plain Layout
PutBitmap
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} PutBitmap(X, Y, Bitmap: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
StretchBitmap
\begin_inset Index idx
status open

\begin_layout Plain Layout
StretchBitmap
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} StretchBitmap(X, Y, Width, Height, Bitmap: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
DiscardBitmap
\begin_inset Index idx
status open

\begin_layout Plain Layout
DiscardBitmap
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} DiscardBitmap(Bitmap: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Canvas Management
\end_layout

\begin_layout Subsubsection
UseWindowCanvas
\begin_inset Index idx
status open

\begin_layout Plain Layout
UseWindowCanvas
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} UseWindowCanvas;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
UseBitmapCanvas
\begin_inset Index idx
status open

\begin_layout Plain Layout
UseBitmapCanvas
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} UseBitmapCanvas(Bitmap: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
ClearCanvas
\begin_inset Index idx
status open

\begin_layout Plain Layout
ClearCanvas
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ClearCanvas;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Clears the active canvas with the background color, previously set by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{SetBackground}
\end_layout

\end_inset

.
 Default color is opaque black.
\end_layout

\begin_layout Subsubsection
CanvasWidth
\begin_inset Index idx
status open

\begin_layout Plain Layout
CanvasWidth
\end_layout

\end_inset

 and CanvasHeight
\begin_inset Index idx
status open

\begin_layout Plain Layout
CanvasHeight
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} CanvasWidth: Integer;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} CanvasHeight: Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Get canvaswidth or height.
 For the window canvas, these values are set by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{InitWindow}
\end_layout

\end_inset

 procedure.
 For a bitmap canvas, these are the width and the height of the bitmap.
\end_layout

\begin_layout Subsubsection
GetPixel
\begin_inset Index idx
status open

\begin_layout Plain Layout
GetPixel
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} GetPixel(X, Y: Integer): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsubsection
PutPixel
\begin_inset Index idx
status open

\begin_layout Plain Layout
PutPixel
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} PutPixel(X, Y, Color: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Canvas Settings
\end_layout

\begin_layout Subsubsection
HighQuality
\begin_inset Index idx
status open

\begin_layout Plain Layout
HighQuality
\end_layout

\end_inset

 and LowQuality
\begin_inset Index idx
status open

\begin_layout Plain Layout
LowQuality
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} HighQuality;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} LowQuality;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sets graphics quality for the subsequent drawing operations.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hspace*{-1
\backslash
parindent}
\end_layout

\end_inset

In high quality:
\end_layout

\begin_layout Itemize
Antialiasing is on: lines and shapes have smooth non-pixelated edges.
\end_layout

\begin_layout Itemize
Stroke control is set to 
\begin_inset Quotes eld
\end_inset

pure
\begin_inset Quotes erd
\end_inset

: coordinates are not normalised to integer values during transforms.
\end_layout

\begin_layout Itemize
Bitmaps use bilinear filtering.
\end_layout

\begin_layout Itemize
Text antialiasing and fractional metrics are on.
\end_layout

\begin_layout Standard
In low quality:
\end_layout

\begin_layout Itemize
Antialiasing is off, no sub-pixel rendering.
\end_layout

\begin_layout Itemize
Stroke control is set to 
\begin_inset Quotes eld
\end_inset

normalize
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Bitmaps use nearest neighbour filtering.
\end_layout

\begin_layout Itemize
Text antialiasing and fractional metrics are off.
\end_layout

\begin_layout Subsubsection
TransparencyOn
\begin_inset Index idx
status open

\begin_layout Plain Layout
TransparencyOn
\end_layout

\end_inset

 and TransparencyOff
\begin_inset Index idx
status open

\begin_layout Plain Layout
TransparencyOff
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} TransparencyOn;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} TransparencyOff;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Change the transparency mode.
 If transparency is on, subsequent colour setting operations 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{SetBackground}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{SetPen}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{SetPaint}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{GradientPaint}
\end_layout

\end_inset

, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{RadialPaint}
\end_layout

\end_inset

 will use higher 8 bits of the colour as alpha channel (transparency).
 If transparency is off, these bits will be ignored.
 Transparency mode does not affect previous colour settings.
\end_layout

\begin_layout Subsubsection
SetBackground
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetBackground
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} SetBackground(Color: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Set active background colour.
 Background colour is used only in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{ClearScreen}
\end_layout

\end_inset

 procedure.
\end_layout

\begin_layout Subsubsection
SetPen
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetPen
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} SetPen(Color :Integer; PenWidth: Real);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Set pen colour and width.
 Pen is used in line and contour drawing procedures, and for rendering text.
\end_layout

\begin_layout Subsubsection
SetPaint
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetPaint
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} SetPaint(Color: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Set flat colour paint.
 The paint is used for filled shape drawing.
\end_layout

\begin_layout Subsubsection
GradientPaint
\begin_inset Index idx
status open

\begin_layout Plain Layout
GradientPaint
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} GradientPaint(X1, Y1, X2, Y2, Color1, Color2: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Set linear gradient paint stretching from point 
\begin_inset Formula $\left(\mathit{X1},\mathit{Y1}\right)$
\end_inset

 having 
\emph on
Color1
\emph default
 to point 
\begin_inset Formula $\left(\mathit{X2},\mathit{Y2}\right)$
\end_inset

 having 
\emph on
Color2
\emph default
.
 The paint is used for filled shape drawing.
\end_layout

\begin_layout Subsubsection
RadialPaint
\begin_inset Index idx
status open

\begin_layout Plain Layout
RadialPaint
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} RadialPaint(X, Y, R, Color1, Color2: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Set radial gradient paint stretching from centre 
\begin_inset Formula $\left(\mathit{X},\mathit{Y}\right)$
\end_inset

 having 
\emph on
Color1
\emph default
 to the radius 
\emph on
R
\emph default
 having 
\emph on
Color2
\emph default
.
 The paint is used for filled shape drawing.
\end_layout

\begin_layout Subsubsection
SetClip
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetClip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} SetClip(X, Y, Width, Height: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Set the clipping area to the specified rectangle.
 
\begin_inset Formula $\left(\mathit{X},\mathit{Y}\right)$
\end_inset

 is the top-left corner of the rectangle.
 All subsequent drawing procedures will be limited to this area.
 This restriction can be removed by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{ResetClip}
\end_layout

\end_inset

 procedure.
\end_layout

\begin_layout Subsubsection
ResetClip
\begin_inset Index idx
status open

\begin_layout Plain Layout
ResetClip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} ResetClip;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Reset the clipping area specified by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{SetClip}
\end_layout

\end_inset

 procedure, so the drawing can be done on the entire screen.
\end_layout

\begin_layout Subsection
Drawing
\end_layout

\begin_layout Subsubsection
DrawLine
\begin_inset Index idx
status open

\begin_layout Plain Layout
DrawLine
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} DrawLine(X1, Y1, X2, Y2: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Draws a line from point 
\begin_inset Formula $\left(\mathit{X1},\mathit{Y1}\right)$
\end_inset

 to point 
\begin_inset Formula $\left(\mathit{X2},\mathit{Y2}\right)$
\end_inset

 using the current pen.
\end_layout

\begin_layout Subsubsection
DrawRect
\begin_inset Index idx
status open

\begin_layout Plain Layout
DrawRect
\end_layout

\end_inset

 and FillRect
\begin_inset Index idx
status open

\begin_layout Plain Layout
FillRect
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} DrawRect(X, Y, Width, Height: Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} FillRect(X, Y, Width, Height: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Draws a rectangle with the specified 
\emph on
Width
\emph default
 and 
\emph on
Height
\emph default
.
 
\begin_inset Formula $\left(\mathit{X},\mathit{Y}\right)$
\end_inset

 is the top-left corner of the rectangle.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{DrawRect}
\end_layout

\end_inset

 draws an outline with the current pen.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{FillRect}
\end_layout

\end_inset

 draws an area filled with the current paint.
 
\end_layout

\begin_layout Subsubsection*
DrawRoundRect
\begin_inset Index idx
status open

\begin_layout Plain Layout
DrawRoundRect
\end_layout

\end_inset

 and FillRoundRect
\begin_inset Index idx
status open

\begin_layout Plain Layout
FillRoundRect
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} DrawRoundRect(X, Y, Width, Height, R: Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} FillRoundRect(X, Y, Width, Height, R: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Draws a rounded rectangle with the specified 
\emph on
Width
\emph default
 and 
\emph on
Height,
\emph default
 and corner radius 
\emph on
R
\emph default
.
 
\begin_inset Formula $\left(\mathit{X},\mathit{Y}\right)$
\end_inset

 is the top-left corner of the rectangle.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{DrawRoundRect}
\end_layout

\end_inset

 draws an outline with the current pen.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{FillRoundRect}
\end_layout

\end_inset

 draws an area filled with the current paint.
 
\end_layout

\begin_layout Subsubsection
DrawOval
\begin_inset Index idx
status open

\begin_layout Plain Layout
DrawOval
\end_layout

\end_inset

 and FillOval
\begin_inset Index idx
status open

\begin_layout Plain Layout
FillOval
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} DrawOval(X, Y, Width, Height: Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} FillOval(X, Y, Width, Height: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Draws an oval with the specified 
\emph on
Width
\emph default
 and 
\emph on
Height
\emph default
.
 
\emph on
X
\emph default
 is the leftmost coordinate of the oval, 
\emph on
Y
\emph default
 is the topmost coordinate.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{DrawOval}
\end_layout

\end_inset

 draws an outline with the current pen.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{FillOval}
\end_layout

\end_inset

 draws an area filled with the current paint.
 
\end_layout

\begin_layout Subsubsection
DrawArc
\begin_inset Index idx
status open

\begin_layout Plain Layout
DrawArc
\end_layout

\end_inset

 and FillArc
\begin_inset Index idx
status open

\begin_layout Plain Layout
FillArc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} DrawArc(X, Y, Width, Height,
\backslash

\backslash
 
\backslash
null
\backslash
quad
\backslash
quad StartAngle, ArcAngle: Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} FillArc(X, Y, Width, Height,
\backslash

\backslash
 
\backslash
null
\backslash
quad
\backslash
quad StartAngle, ArcAngle: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Draws an arc of the oval with the specified 
\emph on
Width
\emph default
 and 
\emph on
Height
\emph default
.
 
\emph on
X
\emph default
 is the leftmost coordinate of the oval, 
\emph on
Y
\emph default
 is the topmost coordinate.
 The arc starts at 
\emph on
StartAngle
\emph default
 degrees and spans 
\emph on
ArcAngle
\emph default
 degrees.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{DrawArc}
\end_layout

\end_inset

 draws an outline with the current pen.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{FillArc}
\end_layout

\end_inset

 draws filled sector of an oval.
 
\end_layout

\begin_layout Subsubsection
DrawPolyline
\begin_inset Index idx
status open

\begin_layout Plain Layout
DrawPolyline
\end_layout

\end_inset

, DrawPolygon
\begin_inset Index idx
status open

\begin_layout Plain Layout
DrawPolygon
\end_layout

\end_inset

, and FillPolygon
\begin_inset Index idx
status open

\begin_layout Plain Layout
FillPolygon
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} DrawPolyline(NumPoints: Integer;
\backslash

\backslash
 
\backslash
null
\backslash
quad
\backslash
quad PointsX, PointsY: 
\backslash
kw{array} 
\backslash
kw{of} Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} DrawPolygon(NumPoints: Integer;
\backslash

\backslash
 
\backslash
null
\backslash
quad
\backslash
quad PointsX, PointsY: 
\backslash
kw{array} 
\backslash
kw{of} Integer);
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} FillPolygon(NumPoints: Integer;
\backslash

\backslash
 
\backslash
null
\backslash
quad
\backslash
quad PointsX, PointsY: 
\backslash
kw{array} 
\backslash
kw{of} Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Draws a polyline or a polygon using the specified points: array 
\emph on
PointsX
\emph default
 stores the 
\emph on
X
\emph default
 coordinates, array 
\emph on
PointsY
\emph default
 stores 
\emph on
Y
\emph default
 coordinates.
 
\emph on
NumPoints
\emph default
 is the number of points to draw; the arrays must have at least this number
 of items each.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{DrawPolyline}
\end_layout

\end_inset

 draws the line with the current pen.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{DrawPolyline}
\end_layout

\end_inset

 draws the line with the current pen and connects the starting and ending
 points.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{FillPolygon}
\end_layout

\end_inset

 draws an area filled with the current paint.
 
\end_layout

\begin_layout Subsection
Text and Fonts
\end_layout

\begin_layout Subsubsection
SetTextFont
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetTextFont
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} SetTextFont(FontName: String; Bold, Italic: Boolean);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Load and set the font for rendering text.
 Fonts are cached once loaded, hence the consequent calls with the same
 
\emph on
FontName
\emph default
 do not cause performance overhead.
 
\emph on
Bold
\emph default
 and 
\emph on
Italic
\emph default
 arguments can be used to modify the style of the font.
\end_layout

\begin_layout Subsubsection
SetTextSize
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetTextSize
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} SetTextSize(Size: Integer);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Change the size of the currently selected font.
 The 
\emph on
Size
\emph default
 is in pixels, but may slightly vary for some fonts.
\end_layout

\begin_layout Subsubsection
DrawText
\begin_inset Index idx
status open

\begin_layout Plain Layout
DrawText
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{procedure} DrawText(X, Y: Integer; Text: String);%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Render the line of text on the screen going to the left from 
\emph on
X
\emph default
.
 
\emph on
Y
\emph default
 is the coordinate of the baseline.
 This procedure ignores newline characters and can output only a single
 line of text.
\end_layout

\begin_layout Subsubsection
TextWidth
\begin_inset Index idx
status open

\begin_layout Plain Layout
TextWidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} TextWidth(Text: String): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function calculates the width of the given text for the currently selected
 font.
\end_layout

\begin_layout Subsection
Colour Calculations
\end_layout

\begin_layout Subsubsection
GetAlpha
\begin_inset Index idx
status open

\begin_layout Plain Layout
GetAlpha
\end_layout

\end_inset

, GetRed
\begin_inset Index idx
status open

\begin_layout Plain Layout
GetRed
\end_layout

\end_inset

, GetGreen
\begin_inset Index idx
status open

\begin_layout Plain Layout
GetGreen
\end_layout

\end_inset

, and GetBlue
\begin_inset Index idx
status open

\begin_layout Plain Layout
GetBlue
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} GetAlpha(Color: Integer): Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} GetRed(Color: Integer): Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} GetGreen(Color: Integer): Real;
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
kw{function} GetBlue(Color: Integer): Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Get an individual component of the given colour: alpha (transparency), red,
 green, or blue.
 The value is returned as real number normalised to the range
\begin_inset space ~
\end_inset


\begin_inset Formula $\left[0,1\right]$
\end_inset

.
\end_layout

\begin_layout Subsubsection
MakeRGB
\begin_inset Index idx
status open

\begin_layout Plain Layout
MakeRGB
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} MakeRGB(R, G, B, A: Real): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Create a colour value from its individual components: 
\emph on
R
\emph default
 for red, 
\emph on
G
\emph default
 for green, 
\emph on
B
\emph default
 for blue, and 
\emph on
A
\emph default
 for alpha (transparency).
 The components are automatically clamped to the range
\begin_inset space ~
\end_inset


\begin_inset Formula $\left[0,1\right]$
\end_inset

.
 This function ignores transparency setting and always uses alpha component.
\end_layout

\begin_layout Subsubsection
BlendColors
\begin_inset Index idx
status open

\begin_layout Plain Layout
BlendColors
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} BlendColors(S: Real; Color1, Color2: Integer): Integer;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function interpolates between 
\emph on
Color1
\emph default
 and 
\emph on
Color2
\emph default
 proportionally to the weight 
\emph on
S
\emph default
 in the range
\begin_inset space ~
\end_inset


\begin_inset Formula $\left[0,1\right]$
\end_inset

.
 The function returns 
\emph on
Color1
\emph default
 if 
\emph on
S
\emph default
 is 0, 
\emph on
Color2
\emph default
 if 
\emph on
S
\emph default
 is 1, and blended color if S is in between.
\end_layout

\begin_layout Subsection
Miscellaneous
\end_layout

\begin_layout Subsubsection
FPSCount
\begin_inset Index idx
status open

\begin_layout Plain Layout
FPSCount
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} FPSCount: Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Frames Per Second (FPS) counter is a popular profiling tool for animation
 and games.
 The function returns the current FPS count.
 In order to get correct readings, this function must be called exactly
 once per frame.
\end_layout

\begin_layout Subsubsection
Interpolate
\begin_inset Index idx
status open

\begin_layout Plain Layout
Interpolate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
codebox{%
\end_layout

\begin_layout Plain Layout


\backslash
kw{function} Interpolate(S, X1, X2: Real): Real;%
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a helper function that calculates linear interpolation between two
 values 
\emph on
X1
\emph default
 and 
\emph on
X2
\emph default
.
 Weight 
\emph on
S
\emph default
 is automatically clamped to the range
\begin_inset space ~
\end_inset


\begin_inset Formula $\left[0,1\right]$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
